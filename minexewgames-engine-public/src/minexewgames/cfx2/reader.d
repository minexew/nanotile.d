/*
    Boost Software License - Version 1.0 - August 17th, 2003
    
    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:
    
    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

module minexewgames.cfx2.reader;

import minexewgames.cfx2.lexer;
import minexewgames.cfx2.node;

import minexewgames.framework.stream;

import std.stream;

class Parser {
    this(Lexer lexer) {
        this.lexer = lexer;
        terminated = false;
    }
    
    void freeToken() {
        Token token;
        lexer.readToken(token);
    }
    
    bool getToken(out Token token_out) {
        if (lexer.getCurrent(token_out))
            return true;
        else {
            terminated = true;
            return false;
        }
    }
    
    void syntaxError(string msg) {
        lexer.error(msg);
    }
    
    Node parseNode(Node parent, int minIndent) {
        Node node, child;
        Token token;

        /* Check whether there are any (more) nodes to process */
        if (!getToken(token))
            return null;

        /* node-name expected */
        if (token.type != TokenType.text) {
            syntaxError("Expected node name");
        }

        /* If this node has lower indentation than expected on this level, it's none of our bussiness */
        if (token.indent < minIndent)
            return null;

        minIndent = token.indent;

        /* When we know the node name, create the object */
        node = new Node;
        node.name = token.text;

        freeToken();

        /* Read the node plain value, if it has any. */
        if (!getToken(token))
            return node;

        if (token.type == TokenType.colon) {
            freeToken();
            
            if (!getToken(token) || token.type != TokenType.text)
                syntaxError("Expected node value after ':' symbol." );

            node.text = token.text;
            
            freeToken();
        }

        /* Parse attributes, if present. */
        if (!getToken(token))
            return node;

        if (token.type == TokenType.lparen) {
            freeToken();
            
            for ( ; ; ) {
                Attrib attr;

                if (!getToken(token) || token.type != TokenType.text)
                    syntaxError("Expected attribute name.");
    
                attr = new Attrib;
                attr.name = token.text;
    
                freeToken();
    
                if (!getToken(token)) {
                    syntaxError("Expected one of ':', ',' or ')'.");
                    return node;
                }
    
                if (token.type == TokenType.colon) {
                    freeToken();
                    
                    if (!getToken(token) || token.type != TokenType.text)
                        syntaxError("Expected attribute value after ':'.");
    
                    attr.value = token.text;
                    
                    freeToken();
                }
    
                node.attributes ~= attr;
    
                if (!getToken(token) || token.type != TokenType.comma)
                    break;
                else
                    freeToken();
            }
    
            if (!getToken(token) || token.type != TokenType.rparen)
                syntaxError("Expected ')' symbol after attribute list.");
                
            freeToken();
        }
    
        while (!terminated) {
            child = parseNode(node, minIndent + 1);
    
            if (child !is null)
                node.children ~= child;
            else
                break;
        }
        
        return node;
    }
    
    Node parseDocument() {
        Node child;
        
        Node doc = new Node;
    
        while (!terminated) {
            child = parseNode(null, 0);
    
            if (child !is null)
                doc.children ~= child;
            else
                return null;
        }
    
        return doc;
    }
    
    Lexer lexer;
    
    bool terminated;
}

class Reader {
    static Node loadDocument(string fileName) {
        auto stream = new StdStreamWrapper(new std.stream.File(fileName));
        return loadDocument(fileName, stream);
    }
    
    static Node loadDocument(string fileName, dlib.core.stream.InputStream stream) {
        Lexer lexer = new Lexer(stream, fileName);

        Parser parser = new Parser(lexer);
        return parser.parseDocument();
    }
}
