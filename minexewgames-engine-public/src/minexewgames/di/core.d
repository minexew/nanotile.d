/*
    Boost Software License - Version 1.0 - August 17th, 2003
    
    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:
    
    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

module minexewgames.di.core;

import minexewgames.di.annotationAwareNew;

import std.conv;
import std.traits;

class InstanceNotProvidedException : Exception {
    string typeName;
    
    this(string typeName) {
        super("No instance or creator specified for class '" ~ typeName ~ "'.");
        this.typeName = typeName;
    }
}

class InstanceOverwriteException : Exception {
    string typeName;
    
    this(string typeName) {
        super("Consistency error: Overwriting instance of '" ~ typeName ~ "'."
                ~ " Consider using a Proxy if you need to swap instances at run time.");
        this.typeName = typeName;
    }
}

// Manages the instance for a single class
// Used by TemplatedInstanceManager as the instance repository
class ClassInstanceManager(InstanceCreator, T) {
    static T instance = null;
    static T function() createInstance = null;
    static T delegate() createInstanceDelegate = null;

    static string classDisplayName() {
        return to!string(typeid(T));
    }

    static bool isDefined() {
        return instance !is null || createInstance !is null || createInstanceDelegate !is null;
    }
    
    static void undefine() {
        instance = null;
        createInstance = null;
        createInstanceDelegate = null;
    }

    static T get(bool createIfDoesntExist = true) {
        // Scenarios:
        //   createInstance is provided for this type => use it to create an instance
        //   no createInstane is provided:
        //     T is instanceable 
        //       use default InstanceCreator
        //     T is not instanceable
        //       throw an exception
        
        if (instance is null && createIfDoesntExist) {
            if (createInstance !is null) {
                instance = createInstance();
            }
            else if (createInstanceDelegate !is null) {
                instance = createInstanceDelegate();
            }
            else static if (__traits(compiles, new T())) {
                instance = InstanceCreator.createInstance!T();
            }
            else {
                throw new InstanceNotProvidedException(classDisplayName);
            }
        }
        
        return instance;
    }
    
    static void inject(T instance, bool overwrite) {
        if (!overwrite && isDefined()) {
            throw new InstanceOverwriteException(classDisplayName);
        }
        
        undefine();
        this.instance = instance;
    }
    
    static void creator(T delegate() createInstance, bool overwrite) {
        if (!overwrite && isDefined()) {
            throw new InstanceOverwriteException(classDisplayName);
        }
        
        undefine();
        this.createInstanceDelegate = createInstance;
    }
    
    static void creator(T function() createInstance, bool overwrite) {
        if (!overwrite && isDefined()) {
            throw new InstanceOverwriteException(classDisplayName);
        }
        
        undefine();
        this.createInstance = createInstance;
    }
}

// Manages instances through ClassInstanceManager instantiated for each class
class TemplatedInstanceManager(InstanceCreator_in) {
    alias InstanceCreator = InstanceCreator_in;
    
    static T get(T)() {
        return ClassInstanceManager!(InstanceCreator, T).get();
    }
    
    static void inject(T)(T instance, bool overwrite) {
        ClassInstanceManager!(InstanceCreator, T).inject(instance, overwrite);
    }
    
    static void creator(T)(T function() createInstance, bool overwrite) {
        ClassInstanceManager!(InstanceCreator, T).creator(createInstance, overwrite);
    }
    
    static void creator(T)(T delegate() createInstance, bool overwrite) {
        ClassInstanceManager!(InstanceCreator, T).creator(createInstance, overwrite);
    }
}

// Creates an instance using the default manager
// (which in turn uses this creator again)
class BasicInstanceCreatorWithTemplatedManager {
    alias TemplatedInstanceManager!BasicInstanceCreatorWithTemplatedManager
            InstanceManager;
            
    static T createInstance(T)() {
        return annotationAwareNew!(InstanceManager, T)();
    }
}
