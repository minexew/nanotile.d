/*
    Boost Software License - Version 1.0 - August 17th, 2003
    
    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:
    
    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

module minexewgames.framework.types;

import minexewgames.framework.annotationUtil;

public {
    import dlib.math.matrix;
    import dlib.math.vector;
    
    import std.stdint;
}

import dlib.math.affine;

import std.conv;
import std.traits;

alias byte2 = Vector!(ubyte, 2);
alias byte3 = Vector!(ubyte, 3);
alias byte4 = Vector!(ubyte, 4);

alias mat2x2 = Matrix2x2f;
alias mat3x3 = Matrix3x3f;
alias mat4x4 = Matrix4x4f;

alias mat2 = Matrix2x2f;
alias mat3 = Matrix3x3f;
alias mat4 = Matrix4x4f;

enum Align {
    left = 0,
    hcenter = 1,
    right = 2,
    
    top = 0,
    vcenter = 4,
    bottom = 8
}

enum Required;

template numElements(T) {
    static if (isInstanceOf!(Vector, T))
        enum numElements = T.arrayof.length;
    else static if (isArray!T)
        enum numElements = T.length;
    else
        enum numElements = 1;
}

template ElementType(T) {
    static if (isInstanceOf!(Vector, T))
        alias ElementType = typeof(T.arrayof[0]);
    else static if (isArray!T)
        alias ElementType = ForeachType!T;
    else
        alias ElementType = T;
}

byte4 RGBA(int r, int g, int b, int a = 0xff) {
    return byte4(cast(ubyte) r, cast(ubyte) g, cast(ubyte) b, cast(ubyte) a);
}

byte4 greyRGBA(int v, int a = 0xff) {
    return RGBA(v, v, v, a);
}

enum RGB : byte4 {
    red = RGBA(0xdd, 0x22, 0x11),
    green = RGBA(0x44, 0xcc, 0x11),
    blue = RGBA(0x11, 0x44, 0xaa),
    
    darkGrey = greyRGBA(0x22),
    lightGrey = greyRGBA(0xDD)
}

// Misc.
uint alignValue(size_t alignment, T)(T value) if (T.sizeof < 4) {
    static assert(alignment && !(alignment & (alignment - 1)), "alignment must be a power of 2");
    
    return cast(uint)(value + alignment - 1) & ~(alignment - 1);
}

T alignValue(size_t alignment, T)(T value) if (T.sizeof >= 4) {
    static assert(alignment && !(alignment & (alignment - 1)), "alignment must be a power of 2");
    
    return cast(T)(value + alignment - 1) & ~(alignment - 1);
}

size_t alignBulkSize(size_t pageSize)(size_t value) {
    if (value < pageSize)
        return toNearestPowerOf2(value);
    else
        return cast(size_t)(value + pageSize - 1) & ~(pageSize - 1);
}

// http://stackoverflow.com/questions/1322510/given-an-integer-how-do-i-find-the-next-largest-power-of-two-using-bit-twiddlin
T toNearestPowerOf2(T)(T n) {
    n--;
    n |= n >> 1;   // Divide by 2^k for consecutive doublings of k up to 32,
    n |= n >> 2;   // and then or the results.
    n |= n >> 4;
    n |= n >> 8;
    n |= n >> 16;
    
    static if (T.sizeof > 4)
        n |= n >> 32;
        
    n++;           // The result is a number of 1 bits equal to the number
                   // of bits in the original number, plus 1. That's the
                   // next highest power of 2.
                   
   return n;
}
