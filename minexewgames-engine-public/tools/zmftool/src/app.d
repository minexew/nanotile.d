/*
    Boost Software License - Version 1.0 - August 17th, 2003
    
    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:
    
    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

import minexewgames.framework.stream;
import minexewgames.framework.MediaFile;

import std.conv;
import std.stdio;
import std.stdint;
import std.stream : File, OpenException;

static immutable string app_tag = "name=zmftool,version=1.0,vendor=Minexew Games";

private {
    bool sectorSizeSet = false;
    uint sectorSize;
}

private int usage() {
    stderr.writef("usage:\n");
    stderr.writef("\tzmftool [<options>] add-section <filename> <section-name> <input-file>\n");
    stderr.writef("\tzmftool [<options>] dump-section <filename> <section-name>\n");
    stderr.writef("\tzmftool [<options>] get <filename> <key>\n");
    stderr.writef("\tzmftool [<options>] info <filename>\n");
    stderr.writef("\tzmftool [<options>] set <filename> <key> <value>\n");
    stderr.writef("\tzmftool [<options>] touch <filename>\n");
    stderr.writef("\n");
    stderr.writef("options:\n");
    stderr.writef("\t-sect <sectsize>\tset sector size for newly created files\n");
    stderr.writef("\n");

    return -1;
}

private int add_section_main(string[] args) {
    if (args.length != 3)
        return usage();

    auto mediaFile = new MediaFile();

    if (sectorSizeSet)
        mediaFile.setSectorSize(sectorSize);

    try {
        mediaFile.open(args[0], false, true);
    }
    catch (MediaFileException ex) {
        stderr.writef("zmftool: failed to open '%s': %s\n", args[0], ex.msg);
        return -1;
    }

    InputStream input;

    try {
        input = new StdStreamWrapper(new File(args[2]));
    }
    catch (OpenException ex) {
        stderr.writef("zmftool: failed to open file '%s'\n", args[2]);
        return -1;
    }

    OutputStream section = mediaFile.createSection(args[1]);

    copyFromTo(input, section);
    return 0;
}

private int dump_section_main(string[] args)
{
    if (args.length != 2)
        return usage();

    auto mediaFile = new MediaFile();

    try {
        mediaFile.open(args[0], true, false);
    }
    catch (MediaFileException ex) {
        stderr.writef("zmftool: failed to open '%s': %s\n", args[0], ex.msg);
        return -1;
    }

    InputStream section = mediaFile.openSection(args[1]);

    if (section is null) {
        stderr.writef("zmftool: section '%s' does not exist\n", args[1]);
        return -1;
    }

    for ( ; section.readable(); ) {
        char buf[1024];

        size_t read = section.readBytes(buf.ptr, buf.length);
        stdout.write(buf.ptr[0..read]);
    }

    return 0;
}

private int get_main(string[] args) {
    if (args.length != 2)
        return usage();

    auto mediaFile = new MediaFile();

    try {
        mediaFile.open(args[0], true, false);
    } catch (MediaFileException ex) {
        stderr.writef("zmftool: failed to open '%s': %s\n", args[0], ex.msg);
        return -1;
    }

    string value = mediaFile.getMetadata(args[1]);

    if (value != "")
        writef("%s=%s\n", args[1], value);
    else
        stderr.writef("zmftool: '%s' not set\n", args[1]);

    return 0;
}

private int info_main(string[] args) {
    if (args.length != 1)
        return usage();

    auto mediaFile = new MediaFile();

    try {
        mediaFile.open(args[0], true, false);
    } catch (MediaFileException ex) {
        stderr.writef("zmftool: failed to open '%s': %s\n", args[0], ex.msg);
        return -1;
    }

    int sectorSize =    cast(int) mediaFile.getSectorSize();
    int fileSize =      cast(int) mediaFile.getFileSize();

    writef("=== basic info ===\n");
    writef("file:               %s (Zombie media file)\n", args[0]);
    writef("bitstream type:     %s\n", mediaFile.getBitstreamType());
    writef("sector size:        %d bytes\n", sectorSize);
    writef("file size:          %d bytes (%d sectors)\n", fileSize, (fileSize + sectorSize - 1) / sectorSize);
    writef("\n");

    writef("=== metadata ===\n");

    mediaFile.iterateMetadata(delegate int(uint16_t key_crc16, string key, string value) {
        writef("%s=%s\n", key, value);
        return 1;
    });

    printf("\n");

    printf("=== section list ===\n");

    mediaFile.iterateSections(delegate int(uint16_t name_crc16, string name, string desc,
            const uint8_t compression[4], uint64_t data_length, uint64_t compressed_length) {
        writef("%s\t(%u bytes", name, cast(uint) data_length);

        if (compression != cast(ubyte[4]) "\0\0\0\0")
            writef(", %u compressed using %c%c%c%c", cast(uint) compressed_length,
                   compression[0], compression[1], compression[2], compression[3]);

        writef(")\n\t%s\n", desc);
        return 1;
    });

    printf("\n");

    return 0;
}

private int set_main(string[] args) {
    if (args.length != 3)
        return usage();

    auto mediaFile = new MediaFile();

    if (sectorSizeSet)
        mediaFile.setSectorSize(sectorSize);

    try {
        mediaFile.open(args[0], false, false);
    } catch (MediaFileException ex) {
        stderr.writef("zmftool: failed to open '%s': %s\n", args[0], ex.msg);
        return -1;
    }

    assert(mediaFile.setMetadata(args[1], args[2]));
    return 0;
}

private int touch_main(string[] args) {
    if (args.length != 1)
        return usage();

    auto mediaFile = new MediaFile();
    
    if (sectorSizeSet)
        mediaFile.setSectorSize(sectorSize);

    try {
        mediaFile.open(args[0], false, true);
    } catch (MediaFileException ex) {
        stderr.writef("zmftool: failed to open '%s': %s\n", args[0], ex.msg);
        return -1;
    }

    // TODO: trim name
    assert(mediaFile.setMetadata("media.original_name", args[0]));
    assert(mediaFile.setMetadata("media.authored_using", app_tag));

    return 0;
}

int main(string[] args) {
    version (unittest) {
        return 0;
    }
    else {
        for (size_t i = 1; i < args.length; ) {
            if (false) {}
            else if (args[i] == "-sect") {
                if (i + 1 >= args.length)
                    return usage();

                sectorSize = to!uint(args[i + 1]);
                sectorSizeSet = true;
                i += 2;
            }
            else if (args[i] == "add-section")
                return add_section_main(args[i + 1..$]);
            else if (args[i] == "dump-section")
                return dump_section_main(args[i + 1..$]);
            else if (args[i] == "get")
                return get_main(args[i + 1..$]);
            else if (args[i] == "info")
                return info_main(args[i + 1..$]);
            else if (args[i] == "set")
                return set_main(args[i + 1..$]);
            else if (args[i] == "touch")
                return touch_main(args[i + 1..$]);
            else
                return usage();
        }
        
        return usage();
    }
}
